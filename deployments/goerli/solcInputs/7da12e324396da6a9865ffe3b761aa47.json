{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\nimport \"./PriceConverter.sol\";\n\nerror FundMe__NotOwner();\n\n/**\n * @title A contract for crowd funding\n * @author DEV Sumon\n * @notice this contract is demo a simple funding contract \n * @dev this implements price feeds our library\n*/\n\ncontract FundMe {\n    using PriceConverter for uint;\n    // 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\n    //storage variabele\n    uint public constant minimumUSD = 50 * 10 ** 18;\n    address private immutable owner;\n\n    // event Funded(address indexed from, uint amount);\n\n    address[] private fundersArray;\n    mapping(address => uint) private addressToAmount;\n   \n    AggregatorV3Interface private priceFeed;\n\n    modifier onlyOwner() {\n        if (msg.sender != owner) revert FundMe__NotOwner();\n        _;\n    }\n\n    constructor(address priceFeedAddress) {\n        owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    // receive() external payable {\n    //     fund();\n    // }\n\n    // fallback() external payable {\n    //     fund();\n    // }\n\n    function fund() public payable {\n        require(\n            msg.value.getConversionRate(priceFeed) >= minimumUSD,\n            \"Eth not enough to send\"\n        ); // 1e18 = 1 * 10 ** 18 = 1000000000000000000 wei\n        addressToAmount[msg.sender] += msg.value;\n        fundersArray.push(msg.sender);\n    }\n\n    function withdraw() public onlyOwner {\n        for (\n            uint funderIndex = 0;\n            funderIndex > fundersArray.length;\n            funderIndex++\n        ) {\n            address funder = fundersArray[funderIndex];\n            addressToAmount[funder] = 0;\n        }\n        fundersArray = new address[](0);\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess);\n    }\n    // function cheaperWithdraw() public onlyOwner {\n    //     address[] memory funders = funders;\n    //     // mappings can't be in memory, sorry!\n    //     for (\n    //         uint256 funderIndex = 0;\n    //         funderIndex < funders.length;\n    //         funderIndex++\n    //     ) {\n    //         address funder = funders[funderIndex];\n    //         addressToAmount[funder] = 0;\n    //     }\n    //     funders = new address[](0);\n    //     // payable(msg.sender).transfer(address(this).balance);\n    //     (bool success, ) = owner.call{value: address(this).balance}(\"\");\n    //     require(success);\n    // }\n\n    // public view pure funtion declearation\n    function getAddressToAmountFunded(address fundingAddress) public view returns(uint){\n        return addressToAmount[fundingAddress];\n    }\n    function getFunder(uint index) public view returns(address){\n        return fundersArray[index];\n    }\n    function getOwner() public view returns(address){\n        return owner;\n    }\n    function getPriceFeed() public view returns(AggregatorV3Interface){\n        return priceFeed;\n    }\n\n\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    // gorerli 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\n        function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint) {\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(priceFeed);\n        (/* uint80 roundID */,\n            int price,\n            /*uint startedAt*/,\n            /*uint timeStamp*/,\n            /*uint80 answeredInRound*/) = priceFeed.latestRoundData();\n        return uint(price * 1e10);\n    }\n    // function getVersion() internal view returns(uint) {\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\n    //     return priceFeed.version();\n    // }\n    function getConversionRate(uint ethAmount,AggregatorV3Interface priceFeed) internal view returns(uint) {\n        uint ethPrice = getPrice(priceFeed);\n        uint ethAmountUsd = (ethPrice * ethAmount) / 1e18 ;\n        return ethAmountUsd;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}