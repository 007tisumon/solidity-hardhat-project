{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\nimport \"./PriceConverter.sol\";\n\ncontract FundMe{\n    using PriceConverter for uint;\n    // 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\n    uint public constant minimumUSD = 50 * 10 ** 18;\n    address[] funders;\n    mapping(address=>uint) public addressToAmount;\n    address public owner;\n\n    AggregatorV3Interface public priceFeed;\n    constructor(address priceFeedAddress){\n        owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable{\n        require(msg.value.getConversionRate(priceFeed)>= minimumUSD,\"Eth not enough to send\"); // 1e18 = 1 * 10 ** 18 = 1000000000000000000 wei\n        funders.push(msg.sender);\n        addressToAmount[msg.sender]=msg.value;\n    }\n    function withdraw() public onlyOwner{\n        \n        for(uint funderIndex=0;funderIndex > funders.length; funderIndex++){\n            address funder=funders[funderIndex];\n            addressToAmount[funder]=0;\n        }\n        funders = new address[](0);\n        (bool callSuccess,) = payable(msg.sender).call{value:address(this).balance}(\"\");\n        require(callSuccess,'Call failed');\n    }\n    modifier onlyOwner{\n        require(owner == msg.sender,\"Sender is not owner\");\n        _;\n    }\n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    // gorerli 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\n        function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint) {\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(priceFeed);\n        (/* uint80 roundID */,\n            int price,\n            /*uint startedAt*/,\n            /*uint timeStamp*/,\n            /*uint80 answeredInRound*/) = priceFeed.latestRoundData();\n        return uint(price * 1e10);\n    }\n    // function getVersion() internal view returns(uint) {\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\n    //     return priceFeed.version();\n    // }\n    function getConversionRate(uint ethAmount,AggregatorV3Interface priceFeed) internal view returns(uint) {\n        uint ethPrice = getPrice(priceFeed);\n        uint ethAmountUsd = (ethPrice * ethAmount) / 1e18 ;\n        return ethAmountUsd;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}